<?php

require_once drupal_get_path('module', 'versioncontrol') . '/tests/VersioncontrolTestCase.test';

abstract class VersioncontrolGitTestCase extends VersioncontrolTestCase {

  /**
   * An internal counter used to prevent filesystem collisions when creating
   * multiple git repositories.
   *
   * @var int
   */
  protected $repocount = 0;

  protected $gitpath;

  public function setUp() {
    // Get the git path before clearing all vars. If no git binary is found, the
    // function will throw an error that safely terminates the test.
    $this->gitpath = _versioncontrol_git_get_binary_path();

    // Each test cleans up its repos, so ensure we start over at 0. This might
    // be superfluous if SimpleTest creates a new test object for each test.
    $this->repocount = 0;
    $args = func_get_args();
    if (array_search('versioncontrol_git', $args) === FALSE) {
      $args[] = 'versioncontrol_git';
    }
    call_user_func_array(array($this, 'parent::setUp'));

    // Set the git path in the sandboxed $conf so it gets used properly
    variable_set('versioncontrol_git_binary_path', $this->gitpath);
  }

  /**
   * Create a new Git repository on disk & in the db using the well-known,
   * structured sample test repository.
   *
   * The repository is created at a derived location on disk that ensures it
   * will be automatically cleaned up when the test is completed.
   *
   * @param array $data
   *   An optional array of data to be passed to the entity builder for the
   *   repository. @see VersioncontrolTestCase::versioncontrolCreateRepository()
   *
   * @return VersioncontrolGitRepository
   */
  public function versioncontrolCreateRepoFromTestRepo($data = array()) {
    $this->repocount++;
    $path = file_directory_path() . '/vc_git/repositories/' . $this->repocount . '.git';
    $tarball = drupal_get_path('module', 'versioncontrol_git') . '/tests/testrepo.tar.bz2';
    mkdir($path);
    exec("tar -xf $tarball -C $path");

    $data = array(
      'path' => $path,
    )  + $data;

    return $this->versioncontrolCreateRepository('git', $data);
  }

  /**
   * Create a new Git repository on disk & in the db by cloning an existing
   * repository from some remote location.
   *
   * The repository is created at a derived location on disk that ensures it
   * will be automatically cleaned up when the test is completed. The test
   * repository has the following characteristics:
   *
   *  - 16 commits
   *  - 18 'items' (files)
   *  - 4 branches - master, enhancements, feature, fixes
   *  - 3 tags - simple, signed, annotated (each having the characteristics
   *    they're named after)
   *
   * @param string $remote
   *   A string representing a valid git remote url (e.g.,
   *   git://git.drupal.org/project/versioncontrol.git), from which the new
   *   repository should be cloned.
   *
   * @param array $data
   *   An optional array of data to be passed to the entity builder for the
   *   repository. @see VersioncontrolTestCase::versioncontrolCreateRepository()
   *
   * @return VersioncontrolGitRepository
   */
  public function versioncontrolCreateRepoFromClone($remote, $data = array()) {
    $this->repocount++;
    $path = file_directory_path() . '/vc_git/repositories/' . $this->repocount . '.git';

    $data = array(
      'path' => $path,
    ) + $data;

    $repo = $this->versioncontrolCreateRepository('git', $data);
    $repo->exec("clone $remote $path");
    return $repo;
  }

  public function tearDown() {
    // Remove temporary repositories, if any
    $i = 0;
    while ($i < $this->repocount) {
      $path = file_directory_path() . '/vc_git/repositories/' . $i . '.git';
      // Recursive directory delete
      foreach (new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path), RecursiveIteratorIterator::CHILD_FIRST) as $item) {
        $item->isFile() ? unlink($item) : rmdir($item);
      }
      rmdir($path);
    }

    // Ensure the internal git path was reset properly.
    if ($this->gitpath != _versioncontrol_git_get_binary_path(FALSE)) {
      variable_set('versioncontrol_git_binary_path', $this->gitpath);
    }
  }
}
