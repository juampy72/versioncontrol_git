<?php

require_once drupal_get_path('module', 'versioncontrol') . '/tests/VersioncontrolTestCase.test';

abstract class VersioncontrolGitTestCase extends VersioncontrolTestCase {

  /**
   * An internal counter used to prevent filesystem collisions when creating
   * multiple git repositories.
   *
   * @var int
   */
  protected $repocount = 0;

  protected $gitpath;

  public function setUp() {
    // Get the git path before clearing all vars. If no git binary is found, the
    // function will throw an error that safely terminates the test.
    $this->gitpath = _versioncontrol_git_get_binary_path();

    // Each test cleans up its repos, so ensure we start over at 0. This might
    // be superfluous if SimpleTest creates a new test object for each test.
    $this->repocount = 0;
    $args = func_get_args();
    if (array_search('versioncontrol_git', $args) === FALSE) {
      $args[] = 'versioncontrol_git';
    }
    call_user_func_array(array($this, 'parent::setUp'));

    // Set the git path in the sandboxed $conf so it gets used properly
    variable_set('versioncontrol_git_binary_path', $this->gitpath);
  }

  public function createRepoFromTestRepo() {
    $this->repocount++;
    $path = file_directory_path() . '/vc_git/repositories/' . $this->repocount . '.git';
    $tarball = drupal_get_path('module', 'versioncontrol_git') . '/tests/testrepo.tar.bz2';
    mkdir($path);
    exec("tar -xf $tarball -C $path");

    $data = array(
      'path' => $path,
    );

    return $this->versioncontrolCreateRepository('git', $data);
  }

  public function createRepoFromClone($remote) {

  }

  public function tearDown() {
    // Remove temporary repositories, if any
    $i = 0;
    while ($i < $this->repocount) {
      $path = file_directory_path() . '/vc_git/repositories/' . $i . '.git';
      // Recursive directory delete
      foreach (new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path), RecursiveIteratorIterator::CHILD_FIRST) as $item) {
        $item->isFile() ? unlink($item) : rmdir($item);
      }
      rmdir($path);
    }

    // Ensure the internal git path was reset properly.
    if ($this->gitpath != _versioncontrol_git_get_binary_path(FALSE)) {
      variable_set('versioncontrol_git_binary_path', $this->gitpath);
    }
  }
}
