<?php
// $Id$
/**
 * @file
 * Git backend for Version Control API - Provides Git commit information and
 * account management as a pluggable backend.
 *
 * Copyright 2008 by Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 * Copyright 2009 by Cornelius Riemenschneider ("CorniI", http://drupal.org/user/136353)
 */

/**
 * The 40-zeroes string that git uses to represent a null ref.
 */
define('GIT_NULL_REV', '0000000000000000000000000000000000000000');

// Update methods.
define('VERSIONCONTROL_GIT_UPDATE_CRON', 0);
define('VERSIONCONTROL_GIT_UPDATE_XGIT', 1);

// The admin and user edit pages.
require_once drupal_get_path('module', 'versioncontrol_git') .'/versioncontrol_git.admin.inc';

/**
 * Implementation of hook_help().
 */
function versioncontrol_git_help($section, $arg) {
  $output = '';
  if ($section == 'admin/help/versioncontrol_git' || $section == 'admin/help#versioncontrol_git') {
    $output = '<p>The Git Backend can be used to retrieve and view commit information. The commit
      information can either be retreived automatically through the use of the <i>xgit</i> scripts
      or using the <i>fetch now</i> link on the project administration repository page. The logs
      are then defaultly avaliable through the <i>commitlog</i> page.</p>
      <p>Information reguarding the setup of <i>xgit</i> scripts is aviable in the <i>README.txt</i>
      located in the <i>xgit</i> directory.</p>
      <p>If you have any questions, comments, or feature requests please visit the
      <a href="http://drupal.org/project/versioncontrol_git">module page</a> and
      post your concerns in the issue quene.</p>';
  }

  return $output;
}

/**
 * Implementation of hook_versioncontrol_backends().
 */
function versioncontrol_git_versioncontrol_backends() {
  return array(
    'git' => new VersioncontrolGitBackend()
  );
}

/**
 * Implementation of hook_cron()
 */
function versioncontrol_git_cron() {
  $constraints = array( 'vcs' => array('git') );
  $git_repositories = versioncontrol_repository_load_multiple(array(), $constraints);

  // Set timeout limit to 3600 seconds as it can take a long time to process
  // the log initially. (And hook_cron() might be called by poormanscron.)
  if (!ini_get('safe_mode')) {
    set_time_limit(3600);
  }
  foreach ($git_repositories as $repository) {
    if ($repository->update_method != VERSIONCONTROL_GIT_UPDATE_CRON) {
      // get repositories that have log fetching enabled
      continue;
    }
    $repository->fetchLogs();
  }
}

function _versioncontrol_git_get_branch_intersect($repository, $item1, $item2) {
  $constraints = array(
    'revisions' => array($item1->revision, $item2->revision),
    'vcs' => array('git'),
    'repo_ids' => array($repository->repo_id),
    'types' => array(VERSIONCONTROL_OPERATION_COMMIT)
  );
  $commit_ops = VersioncontrolOperationCache::getInstance()->getOperations($constraints);
  $branches1 = array();
  $branches2 = array();
  foreach ($commit_ops as $vc_op_id => $op) {
    foreach ($op['labels'] as $label) {
      if ($label['type'] === VERSIONCONTROL_OPERATION_BRANCH) {
        if ($op['revision'] == $item1['revision']) {
          $branches1[]=$label;
        }
        else if ($op['revision'] == $item2['revision']) {
          $branches2[]=$label;
        }
      }
    }
  }
  foreach ($branches1 as $key => $value) {
    if (!in_array($value, $branches2)) {
      unset($branches1[$key]);
    }
  }
  return array_pop($branches1); // We don't know any keys in $branches, so we use array_pop here. Also it'll return NULL if needed
}

/**
 * Validate the path supplied for the git binary.
 */
function _versioncontrol_git_binary_check_path($path) {
  $errors = array();
  // Special case for using evironment $PATH to determine git executable.
  if ($path == 'git') {
    $path = exec('which git', $output, $return);
    if (!empty($return)) {
      $errors[] = t('No binary path was specified at admin/settings/versioncontrol-settings, and a git binary was not found on the $PATH.');
      return $errors;
    }
  }
  if (!is_file($path)) {
    $errors[] = t('The specified git path %file does not exist.', array('%file' => $path));
  }
  if (!$errors && !is_executable($path)) {
    $errors[] = t('The specified git path %file is not executable.', array('%file' => $path));
  }
  if ($errors && $open_basedir = ini_get('open_basedir')) {
    $errors[] = t('PHP\'s <a href="!open-basedir">open_basedir</a> security restriction is set to %open-basedir, which may be interfering with attempts to locate git.', array('%file' => $path, '%open-basedir' => $open_basedir, '!info-link' => url('http://php.net/features.safe-mode#ini.open-basedir')));
  }
  return $errors;
}
