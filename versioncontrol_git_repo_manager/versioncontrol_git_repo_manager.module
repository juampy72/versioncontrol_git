<?php
// $Id$

/**
 * @file
 *   Provides the ability to create and delete repositories on disk using drupal_queue.module.
 */

/**
 * Implementation of hook_menu().
 */
function versioncontrol_git_repo_manager_menu() {
  $items = array();
  $items['admin/settings/git-repo-manager'] = array(
    'title' => 'Git Repository Manager Configuration',
    'description' => 'Manage settings related to how Git repositories are managed on disk.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('versioncontrol_git_repo_manager_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'versioncontrol_git_repo_manager.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}


/**
 * Implementation of hook_nodeapi().
 */
function versioncontrol_git_repo_manager_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (variable_get('versioncontrol_git_repo_manager_manage_repos_for_projects', FALSE)) {
    if (isset($node->type) && $node->type == 'project_project') {
      switch ($op) {
        case 'insert':
        case 'delete':
          // Create the job for our python daemon.
          $data = array(
            'project' => $node->project['uri'],
          );
          $repo_root = variable_get('versioncontrol_git_repo_manager_repository_base_path', '/git') . '/' . $node->project['uri'] . '.git';

          if ($op == 'insert') {
            // Setup the repository data.
            $data['name'] = $node->title;
            $data['root'] = $repo_root;
            $data['vcs'] = 'git';
            $data['backend'] = 'git';
            // Verify that this will be carried all the way to our hook inside the repo object.
            $job = array(
              'operation' => 'create',
              'data' => array(
                'repository_data' => $data,
                'nid' => $node->nid,
              ),
            );
            drupal_set_message(t('Your git repository (%repo) has been enqueued for creation.', array('%repo' => $node->project['uri'] . '.git')));
          }
          elseif ($op == 'delete') {
            drupal_set_message(t('Your git repository (%repo) has been enqueued for deletion.', array('%repo' => $node->project['uri'] . '.git')));
            $job = array(
              'operation' => 'delete',
              'data' => array(
                'repo_id' => versioncontrol_project_get_project_repository_from_nid($node->nid)->repo_id,
              ),
            );
          }
          drupal_queue_include();
          $queue = DrupalQueue::get('versioncontrol_git_repo_manager');
          $queue->createItem($job);
      }
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 *
 * Inform the job queueing system about our worker callback.
 */
function versioncontrol_git_repo_manager_cron_queue_info() {
  $queues = array();

  $queues['versioncontrol_git_repo_manager'] = array(
    'worker callback' => 'versioncontrol_git_repo_manager_run_worker',
    'time' => 0,
  );

  return $queues;
}

/**
 * Worker callback for the versioncontrol_git_repo_manager queue.
 *
 * @param array $data
 */
function versioncontrol_git_repo_manager_run_worker($data) {
  switch ($data['operation']) {
    case 'create':
      _versioncontrol_git_repo_manager_create_git_repository($data['data']);
      // drush_print(t("Job processed. Git repository created at path @path.\n", array('@path' => $item->data['data']['repository_data']['root'])));
      break;
    case 'delete':
      _versioncontrol_git_repo_manager_delete_git_repository($data['data']);
      // drush_print(t("Job processed. Git repository @repo_id deleted.\n", array('@repo_id' => $item->data['data']['repo_id'])));
      break;
  }
}

/**
 * Creates a git repository on disk.
 *
 * Note: This function should never be called by apache.  It should
 * only ever be invoked by drush or some PHP worker.
 *
 * @param (array) $data
 *   An array with the following structure:
 *   $data = array(
 *     'name' => 'Name of repository',
 *     'root' => '/some/path.git',
 *     'nid' => 123,
 *   );
 */
function _versioncontrol_git_repo_manager_create_git_repository($data) {
  // Allow modules to alter the data
  drupal_alter('versioncontrol_git_repo_manager_create_repository', $data);
  // Allow modules to respond to the creation
  module_invoke_all('versioncontrol_git_repo_manager_pre_create', $data);
  $repository_path = $data['repository_data']['root'];

  // Create the repository on disk
  exec('git init --bare ' . escapeshellarg($repository_path), $output, $return);
  if ($return) {
    // init failed for some reason, throw exception
    throw new Exception('Git repository initialization failed with code ' . $return . ' and error message \'' . implode(' ', $output) . '\'', E_ERROR);
  }

  // Create, configure and save versioncontrol entity.
  $backend = versioncontrol_get_backends($data['repository_data']['vcs']);
  $backend->buildEntity('repo', $data['repository_data']);
  $repository = $backend->buildEntity('repo', $data['repository_data']);
  $repository->insert();

  // Allow modules to respond to the newly created repository object.
  module_invoke_all('versioncontrol_git_repo_manager_post_create', $data, $repository);
}

/**
 * Deletes a git repository on disk.
 *
 * Note: This function should never be called by apache.  It should
 * only ever be invoked by drush or some PHP worker.
 *
 * @param (array) $data
 *   An array with the following structure:
 *   $data = array(
 *     'repo_id' => 123,
 *   );
 */
function _versioncontrol_git_repo_manager_delete_git_repository($data) {
  $repository = versioncontrol_repository_load($data['repo_id']);
  exec('rm -rf ' . escapeshellarg($repository->root), $output, $return);
  if ($return) {
    // Deletion failed, throw an error.
    throw new Exception('Git repository deletion failed with code ' . $return . ' and error message \'' . implode(' ', $output) . '\'', E_ERROR);
  }

  $repository->delete();

  // Allow modules to respond to the deletion of this repository.
  module_invoke_all('versioncontrol_git_repo_manager_post_delete', $data, $repository);
}

/**
 * Implementation of hook_versioncontrol_git_repo_manager().
 */
function versioncontrol_git_repo_manager_versioncontrol_git_repo_manager_post_create($data, $repository) {
  if (module_exists('versioncontrol_project') && variable_get('versioncontrol_git_repo_manager_manage_repos_for_projects', FALSE)) {
    if (isset($data['nid']) && is_numeric($data['nid'])) {
      // TODO: test associating the repo with the project.
      db_merge('versioncontrol_project_projects')
        ->key(array('nid' => $data['nid']))
        ->fields(array('repo_id' => $repository->repo_id))
        ->execute();
    }
  }
}

